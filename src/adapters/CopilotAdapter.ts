/**
 * GitHub Copilot 适配器
 * 生成 .github/.copilot-instructions.md 文件
 */

import type { ParsedRule } from '../types/rules';
import { Logger } from '../utils/logger';
import type { GeneratedConfig } from './AIToolAdapter';
import { BaseAdapter } from './AIToolAdapter';

/**
 * GitHub Copilot 适配器
 *
 * GitHub Copilot 使用 .github/.copilot-instructions.md 文件
 * 支持更结构化的 Markdown 格式，可以包含代码示例
 */
export class CopilotAdapter extends BaseAdapter {
  readonly name = 'GitHub Copilot';
  readonly enabled: boolean;

  constructor(enabled: boolean = true) {
    super();
    this.enabled = enabled;
  }

  /**
   * 生成 .github/.copilot-instructions.md 文件内容
   */
  async generate(rules: ParsedRule[]): Promise<GeneratedConfig> {
    Logger.info('Generating GitHub Copilot configuration', { ruleCount: rules.length });

    if (rules.length === 0) {
      Logger.warn('No rules to generate for GitHub Copilot');
      return {
        filePath: this.getFilePath(),
        content: this.generateEmptyConfig(),
        generatedAt: new Date(),
        ruleCount: 0,
      };
    }

    // 按优先级排序
    const sortedRules = this.sortByPriority(rules);

    // 按标签分组
    const groupedByTag = this.groupByTag(sortedRules);

    // 生成内容
    let content = '';

    // 添加元数据注释
    content += this.generateMetadata(rules.length);

    // 添加标题和说明
    content += '# GitHub Copilot Instructions\n\n';
    content += '> This file provides coding guidelines and rules for GitHub Copilot.\n';
    content += '> Generated by Turbo AI Rules extension.\n\n';

    // 添加目录
    content += this.generateTableOfContents(groupedByTag);

    // 按标签添加规则
    content += this.formatRulesByTag(groupedByTag);

    Logger.info('GitHub Copilot configuration generated', {
      ruleCount: rules.length,
      tagCount: groupedByTag.size,
      contentLength: content.length,
    });

    return {
      filePath: this.getFilePath(),
      content,
      generatedAt: new Date(),
      ruleCount: rules.length,
    };
  }

  /**
   * 生成目录
   */
  private generateTableOfContents(groupedByTag: Map<string, ParsedRule[]>): string {
    let toc = '## Table of Contents\n\n';

    for (const [tag, rules] of groupedByTag.entries()) {
      const anchor = tag.toLowerCase().replace(/\s+/g, '-');
      toc += `- [${this.capitalize(tag)}](#${anchor}) (${rules.length} rules)\n`;
    }

    toc += '\n---\n\n';

    return toc;
  }

  /**
   * 按标签格式化规则
   */
  private formatRulesByTag(groupedByTag: Map<string, ParsedRule[]>): string {
    let content = '';

    for (const [tag, rules] of groupedByTag.entries()) {
      content += `## ${this.capitalize(tag)}\n\n`;

      for (const rule of rules) {
        content += `### ${rule.title}\n\n`;

        // 添加元数据
        const metadata = this.formatMetadata(rule);
        if (metadata) {
          content += `${metadata}\n\n`;
        }

        // 添加规则内容
        content += `${rule.content}\n\n`;
      }

      content += '---\n\n';
    }

    return content;
  }

  /**
   * 格式化元数据
   */
  private formatMetadata(rule: ParsedRule): string {
    const parts: string[] = [];

    if (rule.metadata.priority) {
      const emoji = this.getPriorityEmoji(rule.metadata.priority);
      parts.push(`${emoji} **Priority:** ${rule.metadata.priority}`);
    }

    if (rule.metadata.author) {
      parts.push(`👤 **Author:** ${rule.metadata.author}`);
    }

    if (rule.metadata.version) {
      parts.push(`📌 **Version:** ${rule.metadata.version}`);
    }

    if (rule.metadata.tags && rule.metadata.tags.length > 0) {
      parts.push(`🏷️ **Tags:** ${rule.metadata.tags.join(', ')}`);
    }

    return parts.length > 0 ? parts.join(' | ') : '';
  }

  /**
   * 获取优先级对应的 emoji
   */
  private getPriorityEmoji(priority: string): string {
    const emojiMap: Record<string, string> = {
      high: '🔴',
      medium: '🟡',
      low: '🟢',
    };
    return emojiMap[priority] || '⚪';
  }

  /**
   * 首字母大写
   */
  private capitalize(str: string): string {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  /**
   * 生成空配置
   */
  private generateEmptyConfig(): string {
    return (
      this.generateMetadata(0) +
      '# GitHub Copilot Instructions\n\n' +
      '> No rules configured yet.\n'
    );
  }

  /**
   * 验证配置文件
   */
  validate(content: string): boolean {
    if (!super.validate(content)) {
      return false;
    }

    // 检查是否包含标题
    return content.includes('# ') || content.includes('## ');
  }

  /**
   * 获取文件路径
   */
  getFilePath(): string {
    return '.github/.copilot-instructions.md';
  }
}
