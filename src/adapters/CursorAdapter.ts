/**
 * Cursor AI 适配器
 * 生成 .cursorrules 文件
 */

import type { ParsedRule } from '../types/rules';
import { Logger } from '../utils/logger';
import type { GeneratedConfig } from './AIToolAdapter';
import { BaseAdapter } from './AIToolAdapter';

/**
 * Cursor AI 适配器
 *
 * Cursor 使用 .cursorrules 文件，格式为纯 Markdown
 * 规则按优先级排序，高优先级规则放在前面
 */
export class CursorAdapter extends BaseAdapter {
  readonly name = 'Cursor';
  readonly enabled: boolean;

  constructor(enabled: boolean = true) {
    super();
    this.enabled = enabled;
  }

  /**
   * 生成 .cursorrules 文件内容
   */
  async generate(rules: ParsedRule[]): Promise<GeneratedConfig> {
    Logger.info('Generating Cursor configuration', { ruleCount: rules.length });

    if (rules.length === 0) {
      Logger.warn('No rules to generate for Cursor');
      return {
        filePath: this.getFilePath(),
        content: this.generateEmptyConfig(),
        generatedAt: new Date(),
        ruleCount: 0,
      };
    }

    // 按优先级排序
    const sortedRules = this.sortByPriority(rules);

    // 生成内容
    let content = '';

    // 添加元数据注释
    content += this.generateMetadata(rules.length);

    // 添加标题
    content += '# AI Coding Rules for Cursor\n\n';
    content += '> This file is automatically generated by Turbo AI Rules extension.\n';
    content += '> Do not edit manually - changes will be overwritten on next sync.\n\n';

    // 添加规则
    content += this.formatRulesForCursor(sortedRules);

    Logger.info('Cursor configuration generated', {
      ruleCount: rules.length,
      contentLength: content.length,
    });

    return {
      filePath: this.getFilePath(),
      content,
      generatedAt: new Date(),
      ruleCount: rules.length,
    };
  }

  /**
   * 格式化规则为 Cursor 格式
   */
  private formatRulesForCursor(rules: ParsedRule[]): string {
    return rules
      .map((rule) => {
        let section = `## ${rule.title}\n\n`;

        // 添加元数据信息
        if (rule.metadata.priority) {
          section += `**Priority:** ${rule.metadata.priority}\n\n`;
        }

        if (rule.metadata.tags && rule.metadata.tags.length > 0) {
          section += `**Tags:** ${rule.metadata.tags.join(', ')}\n\n`;
        }

        // 添加规则内容
        section += `${rule.content}\n`;

        return section;
      })
      .join('\n---\n\n');
  }

  /**
   * 生成空配置
   */
  private generateEmptyConfig(): string {
    return (
      this.generateMetadata(0) + '# AI Coding Rules for Cursor\n\n' + '> No rules configured yet.\n'
    );
  }

  /**
   * 验证 .cursorrules 文件
   */
  validate(content: string): boolean {
    // Cursor 的配置文件是纯 Markdown，只需检查非空
    if (!super.validate(content)) {
      return false;
    }

    // 可以添加更多验证逻辑，例如检查是否包含标题
    return content.includes('# ');
  }

  /**
   * 获取文件路径
   */
  getFilePath(): string {
    return '.cursorrules';
  }
}
